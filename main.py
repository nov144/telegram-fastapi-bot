from fastapi import FastAPI, Request, HTTPException
from aiogram import types, Bot, Dispatcher, F
from aiogram.types import Message
from bot import bot, dp
from config import TELEGRAM_BOT_TOKEN
import os
import asyncio
import httpx  # –¥–ª—è –ø–∏–Ω–≥–∞

app = FastAPI()

# ‚úÖ –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    print("üì• –ü–æ–ª—É—á–µ–Ω /start")
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç!")

# üåç –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ Render ENV
WEBHOOK_BASE = os.getenv("WEBHOOK_URL")
if not WEBHOOK_BASE:
    raise RuntimeError("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")

WEBHOOK_BASE = WEBHOOK_BASE.rstrip("/")
FULL_WEBHOOK_URL = f"{WEBHOOK_BASE}/webhook?token={TELEGRAM_BOT_TOKEN}"
print("‚û°Ô∏è FULL_WEBHOOK_URL:", FULL_WEBHOOK_URL)

@app.on_event("startup")
async def on_startup():
    print("üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(FULL_WEBHOOK_URL)
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", FULL_WEBHOOK_URL)

    # üü¢ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø–∏–Ω–≥–∏, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª –ø—Ä–æ—Ü–µ—Å—Å
    asyncio.create_task(ping_forever())

async def ping_forever():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                resp = await client.get(f"{WEBHOOK_BASE}/health")
                print("üì° ping /health:", resp.status_code)
        except Exception as e:
            print("‚ùå ping error:", e)
        await asyncio.sleep(60)

@app.post("/webhook")
async def webhook(request: Request):
    token = request.query_params.get("token")
    if token != TELEGRAM_BOT_TOKEN:
        raise HTTPException(status_code=403, detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")

    try:
        data = await request.json()
        update = types.Update.model_validate(data)
        await dp.feed_update(bot, update)
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:", e)

    return {"ok": True}

@app.get("/health")
async def health():
    return {"status": "ok"}

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()

