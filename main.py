from fastapi import FastAPI, Request, HTTPException
from aiogram import types, Bot, Dispatcher, F
from aiogram.types import Message
from bot import bot, dp
from config import TELEGRAM_BOT_TOKEN
import os
import asyncio

app = FastAPI()

# ‚úÖ –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    print("üì• –ü–æ–ª—É—á–µ–Ω /start")
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç!")

# üåç –°—Å—ã–ª–∫–∞ Webhook
WEBHOOK_BASE = os.getenv("WEBHOOK_URL")
if not WEBHOOK_BASE:
    raise RuntimeError("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")

WEBHOOK_BASE = WEBHOOK_BASE.rstrip("/")
FULL_WEBHOOK_URL = f"{WEBHOOK_BASE}/webhook?token={TELEGRAM_BOT_TOKEN}"
print("‚û°Ô∏è FULL_WEBHOOK_URL:", FULL_WEBHOOK_URL)

# üöÄ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ FastAPI
@app.on_event("startup")
async def on_startup():
    print("üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(FULL_WEBHOOK_URL)
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", FULL_WEBHOOK_URL)

    # üîÅ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è ping Telegram API
    async def keep_alive():
        while True:
            try:
                me = await bot.get_me()
                print("üîÑ Ping Telegram OK:", me.username)
            except Exception as e:
                print("‚ö†Ô∏è Ping Telegram FAIL:", e)
            await asyncio.sleep(118)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

    asyncio.create_task(keep_alive())

# üîê –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
@app.post("/webhook")
async def webhook(request: Request):
    print("üü¢ Webhook triggered")
    token = request.query_params.get("token")
    if token != TELEGRAM_BOT_TOKEN:
        raise HTTPException(status_code=403, detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")

    try:
        data = await request.json()
        update = types.Update.model_validate(data)
        await dp.feed_update(bot, update)
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:", e)

    return {"ok": True}

# üíì Health-check
@app.get("/health")
async def health():
    return {"status": "ok"}

# üõë Shutdown
@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()
