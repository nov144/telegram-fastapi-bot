from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message
import os

# üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_BASE = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN or not WEBHOOK_BASE:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ WEBHOOK_URL –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")

WEBHOOK_BASE = WEBHOOK_BASE.rstrip("/")
FULL_WEBHOOK_URL = f"{WEBHOOK_BASE}/webhook?token={BOT_TOKEN}"

# üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# ‚úÖ –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "/start")
async def handle_start(message: Message):
    print("üì• –ü–æ–ª—É—á–µ–Ω /start")
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç!")

# üöÄ –ó–∞–ø—É—Å–∫
@app.on_event("startup")
async def on_startup():
    print("üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(FULL_WEBHOOK_URL)
    info = await bot.get_webhook_info()
    print("üì° Webhook info:", info)

@app.post("/webhook")
async def webhook(request: Request):
    print("üü¢ Webhook triggered")

    token = request.query_params.get("token")
    if token != BOT_TOKEN:
        raise HTTPException(status_code=403, detail="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")

    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", str(e))
        raise HTTPException(status_code=500, detail=str(e))

    return {"ok": True}

@app.get("/health")
async def health():
    return {"status": "ok"}

@app.on_event("shutdown")
async def shutdown():
    await bot.delete_webhook()
    await bot.session.close()
